---
#All nodes are of the same architecture. (valid architectures are p8, p9 or x86)
#Hardware memory and storage requirements;
#Requirement Mgmt Host Compute Host
#RAM 64 GB 32 GB
#Disk space (Spectrum Cond) 12 GB 12 GB
#Disk space (Spectrum DLI) 11 GB 11 GB
#Much of the hardware requirements can probably be checked with Ansible facts.


#- name: Gather Facts for nodes


- name: Set Variables
  set_fact:
    mountname: "/" #root_filesystem
    cond_dli_size: 33000000 #kilobytes
    mgmt_ram: 64  #GB
    compute_ram: 32  #GB

#Verify RAM space
- name: gather Mangement Host RAM
#  command: " echo {{ hostvars['localhost']['ansible_memory_mb']['real']['total'] }} "
  shell: "free -t -g | tail -n 1 | awk '{ print $2}'"
  delegate_to: localhost
  register: mgmt_ram_size

- name: Gather copute Host RAM
  shell: "free -t -g | tail -n 1 | awk '{ print $2}'"
#  command: "echo {{ ansible_memory_mb.real.total }}"
  register: compute_ram_size

- name: Verify RAM Requirements
  assert:
    that:
      - "{{ mgmt_ram_size.stdout }} >=  {{ mgmt_ram }}"
      - "{{ compute_ram_size.stdout }} >=  {{ compute_ram }}"
    fail_msg: "RAM Requirement failed. Verify there is RAM available. (CMD: free )"

- name: Debug - Verify RAM Requirements
  debug:
    msg:
      - " {{ mgmt_ram_size.stdout }} >= {{ mgmt_ram }} "
      - "{{ compute_ram_size.stdout }} >=  {{ compute_ram }}"
  register: ram_status

#Verify Hdisk space
- name: Verify disk data
  shell: "df {{ mountname }} --output='avail' | tail -n 1"
#  command: "echo {{ host_to.size_available }}"
#  vars:
#    host_to: "{{ hostvars['localhost']['ansible_mounts'] | selectattr('mount','equalto',mountname) | list | first }}"
  register: disk_space

- name: Verify free space is sufficent for software install
  assert:
    that:
      - "{{ disk_space.stdout }} >= {{ cond_dli_size }}"
    fail_msg: "Not enough disk space on '{{ mountname }}' mounted drive."

- name: Debug - Verify free space is sufficent for software install
  debug:
    msg:
      - "mgmt disk size: {{ disk_space.stdout }}"

#Verify System Arch
- name: Check local system arch
  shell: "lscpu | grep 'Model name' | awk '{print $3}'" #POWER8, POWER9, Intel[x86_64]
  register: mgmt_arch

- name: Check client arch
  command: "/usr/bin/lscpu"
  register: client_arch

- name: Check if Arch Unity Exists
  assert:
    that:
      - client_arch.stdout.find('{{ mgmt_arch.stdout }}') != -1
    fail_msg: "Architecture varies between nodes. If aware of hybrid nodes, please continue"
  register: arch_unity

