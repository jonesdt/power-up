---
#Validate shared storage is mounted and configured properly

- name: Set local variables #used for testing
  set_fact:
    fs_size_requirement: '2000000' #in Kilobytes

- name: Include configuration environment variables
  include_vars:
    file: envs_spectrum_conductor_dli.yml
    name: envs

- name: find state of DLI_SHARED_FS
  stat:
    path: "{{ envs.DLI_SHARED_FS }}"
  become: yes
  register: DLI_SHARED_FS_state

- name: Check if DLI_SHARED_FS is empty
  command: "ls {{ envs.DLI_SHARED_FS }}"
  become: yes
  register: DLI_SHARED_FS_empty

- name: DEBUG - Status of file paths
  command: "echo Path is Empty!"
  when: DLI_SHARED_FS_state['stat']['isdir'] is defined and DLI_SHARED_FS_empty['stdout'] == ""

- name: Locate shared file systems on /etc/fstab
  shell: "cat /etc/fstab | sed 1,8d | awk '{ print $2}' | grep {{ envs.DLI_SHARED_FS }}"
  register: DLI_SHARED_FS_collected
  become: yes

- name: Fail status of DLI_SHARED_FS on /etc/fstab
  command: "echo DLI_SHARED_FS does not exist in /etc/fstab"
  when: DLI_SHARED_FS_collected.stdout == ""

- name: Success status of DLI_SHARED_FS on /etc/fstab
  command: "echo DLI_SHARED_FS exists in /etc/fstab"
  when: DLI_SHARED_FS_collected.stdout != ""

#Verify Storage of DLI_SHARED_FS
- name: Check shared fs storage size
  shell: "df {{ envs.DLI_SHARED_FS }} --output='avail' | tail -n 1"
  register: DLI_SHARED_FS_space

- name: Verify size requirement of at least 2GB
  assert:
    that:
      - "{{ DLI_SHARED_FS_space.stdout }} >= {{ fs_size_requirement }}"
    fail_msg: "Shared storage fails to meet 2GB storage requirements"

#- name: Debug variables
#  debug:
#    msg: "{{ DLI_SHARED_FS_state }}"

- name: Check permissions for CLUSTERADMIN user (read/write)
  command: "echo Owner:{{ DLI_SHARED_FS_state.stat.pw_name }} \
  Read:{{ DLI_SHARED_FS_state.stat.rusr }} \
  Write:{{ DLI_SHARED_FS_state.stat.wusr }}"

- name: Print sucess Status if CLUSTERADMIN user has correct permissions
  command: "echo {{ DLI_SHARED_FS_state.stat.pw_name }} has correct permissions"
  when: DLI_SHARED_FS_state.stat.rusr and DLI_SHARED_FS_state.stat.wusr

- name: Install acl on cluster nodes
  yum:
    name: acl
    state: present

- name: Verify setfacl is present
  command: "setfacl -v"
  register:  setfacl_status

- name: Ensure that the file system allows traditional (Posix) and NFSv4 ACLs
  command: ""  #echo Still need to complete"
  register: acl_info

#Verify Mounted Correctly
- name: Set test variables
  set_fact:
    CLUSTERADMIN: "egoadmin"
    ADMINGROUP: "egoadmin"
#    DLI_SHARED_FS: "/dli_shared_fs"

- name: Export Environment Variables
  shell: "export CLUSTERADMIN={{ CLUSTERADMIN }}; \
  export ADMINGROUP={{ ADMINGROUP }}; \
  export DLI_SHARED_FS={{ envs.DLI_SHARED_FS }}; \
  echo $CLUSTERADMIN $ADMINGROUP $DLI_SHARED_FS"
  when: envs.DLI_SHARED_FS != '/'

- name: Creates Directory if not exists and Update ownership of DLI_SHARED_FS to CLUSTERADMIN
  file:
    path:  "{{ envs.DLI_SHARED_FS }}"     #or use {{ DLI_SHARED_FS }} ???
    owner: "{{ CLUSTERADMIN }}"
    state: directory
    recurse: yes
  register: verify_ownership
  when: envs.DLI_SHARED_FS != '/'

- name: Verify DLI_SHARED_FS is owned by CLUSTERADMIN and remove all other access
  file:
    path: "{{ envs.DLI_SHARED_FS }}"
    mode: 755
  when: verify_ownership.group == CLUSTERADMIN and envs.DLI_SHARED_FS != '/'

- name: Set the correct ownership for DLI_RESULT_FS
  shell: "chown $egoadmin:$egoadmin $DLI_RESULT_FS"
  when: verify_ownership.group == CLUSTERADMIN and envs.DLI_SHARED_FS != '/'

- name: Update DLI_RESULT_FS mode '733'
  file:
    path: "{{ envs.DLI_SHARED_FS }}"
    mode: 733
  when: verify_ownership.group == CLUSTERADMIN and envs.DLI_SHARED_FS != '/'

- name: Update DLI_RESULT_FS mode 'o+t'
  file:
    path: "{{ envs.DLI_SHARED_FS }}"
    mode: "o+t"
  when: verify_ownership.group == CLUSTERADMIN and envs.DLI_SHARED_FS != '/'

